[{"title":"【OI·数据结构】线性表","path":"/2023/08/24/【数据结构】线性表/","content":"$\\text {STL vector}$ 在语法入门中，我们曾学习过数组，实际上，数组就是一种数据结构，而且是所有其他数据结构的基础， 我们后面要学到的栈、二叉树、图等都是基于数组或链表存储的，不过这是后话了。 回想起数组，它有一个不太方便的特点是「长度固定」，如果想扩容，则需要使用 resize() 方法， 但是接下来我们介绍的 $\\text {vector}$ 则可以动态的规划空间， 它每次加入元素，都会将现有空间翻倍，也就是翻倍法。 直到空间充足，这样，如果需要大小为 $n$ 的空间，$\\text {vector}$ 只需要扩容 $log2(n)$ 次就可以了。 $\\text {vector}$ 方法我们已经知道了 $\\text {vecror}$ 的「翻倍魔法」，接下来介绍 $\\text {vector}$ 的各种方法： 声明标准的是vector&lt;Type&gt; v，声明一个 Type 类型的 $\\text {vector v}$ 。 vector&lt;Type&gt; v(N,i)，在声明的同时，预设长度为 $N$，所有元素初始化为 $i$，省略 $i$ 则默认为 $0$。 vector&lt;int&gt; v &#123;114514,1919810&#125;，在声明的同时，初始设置了一些元素 $114514,1919810$。 vector&lt;int&gt; v(a) // a 为一个 vector，在声明的同时，赋值为 $a$。 vector&lt;int&gt; v(a,a + sizeof(a)) // a 为一个 int 数组，在声明的同时，赋值为 $a$。 vector&lt;Type&gt; v[114514]，与标准的不同的是，它了声明 114514 个 vector。 …… 💡Tips 你知道吗？ vector 的类型也可以是一个 vector、set 或 pair 等其他容器哦！ 像这样：vector&lt;vector&lt;int>> v 声明一个二维 vector。 甚至可以无限套娃：vector&lt;vector&lt;vector&lt;...>>>。 ###### 成员函数 `v[pos]`，查询 $pos$ 位置元素的值。$O(1)$ `v.push_back(x)`，将变量 $x$ 插入到末尾。均摊 $O(1)$ `v.push_pop()`，将末尾的元素删除。$O(1)$ `v.insert(pos,x)`，在 $pos$ 位置的前面插入一个元素 $x$。$O(n)$ `v.erase(pos,len)`，删除从 $pos$ 位置开始的 $len$ 个元素。$O(n)$ `v.size()`，返回 $v$ 的长度。$O(1)$ 更多方法参阅微软文档。 ###### 迭代器 $\\text {vector}$ 除了可以使用类似于 $\\text {array}$ 的使用方法，也可以使用它的专属方式——迭代器。 迭代器类似于指针，你可以将迭代器指向一个元素以操作元素。 `vector::iterator it`，声明迭代器 $it$。 `v.begin()` `v.end()`，分别获取首尾的迭代器，注意，这里的尾指的是最后一个元素向后一个位置。 `*it`，获取 $it$ 指向元素的值。 `++ it` `-- it`，指向下一个和上一个元素。 `for(it = v.begin();i != v.end();i ++)`，迭代器 $it$ 遍历 $v$，修改/查询需使用 `*it`。 `for(auto it:v)`，$\\text {C++11}$ 提供的遍历容器的方式，可以获取元素的值。 `for(auto &it:v)`，同上，但是是以引用的方式遍历，可以修改元素的值。 ⚠️Warning for(auto it:v) 并不是绝对安全的遍历方法，而且 it 并非迭代器。 示例： 12345678910111213141516171819#include&lt;bits/stdc++.h&gt;using namespace std;vector&lt;int&gt; v &#123;1,2,3,4,5&#125;;vector&lt;int&gt;::iterator it;int main()&#123; v.push_back(114514); for(int i = 0;i &lt; v.size();i ++) // output:1,2,3,4,5,114514 cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;; puts(&quot;&quot;); v.pop_back(); for(it = v.begin();i != v.end();i ++) // output:1,2,3,4,5 cout&lt;&lt;*it&lt;&lt;&quot; &quot;; puts(&quot;&quot;); for(auto &amp;it:v) it = 0; for(auto it:v) cout&lt;&lt;it&lt;&lt;&quot; &quot;; // output:0 0 0 0 0 return 0;&#125; 栈栈（$\\text {stack}$）是一种后进先出（$\\text {Last In First Out,LIFO}$）的线性表，顾名思义，后入栈的元素反而先出栈，其限制是只能在一端插入与删除， 就像下面这样，只有一端有开口，另一端则是封死的。 \\large\\text {栈顶} \\begin{array}{c|c|c|c|c|c|c|c|{3}{r@{.}l|}} \\hline \\ 0&1&2&3&4&5&6&7&...\\\\ \\hline \\end{array} 栈底一般的，我们将栈能插入与删除的一端称为「栈顶」，而不能进行操作的一端称为「栈底」。 同时，插入操作一般称作入栈或压栈（$\\text {push}$），删除操作称作出栈或弹出（$\\text {pop}$）。 一个通俗的例子是把栈看作一个盘子堆，只能在盘子堆的顶上拿取盘子，如果从中间抽出/插入盘子，盘子堆就会倒塌，碎成碎片。 手写栈接下来我们尝试一下，使用静态数组来模拟一个栈。 从增加元素开始，先考虑栈底与栈顶的位置，很明显，为了不限制栈的大小与方便，栈底设在 $1$ 的位置比较好， 再用一个 int $top$ 指向当前栈顶的位置 1int top = 0,s[MAXN] = &#123;0&#125;; // 一开始栈内没有元素，所以 top 指向 0 表示当前栈内为空 当进行压栈时，新的元素会被「放」在原来的栈顶上， 此时的栈顶就是 $top + 1$，再赋值即可。 123void push(int x)&#123; // 传参需要压栈的元素 x s[top ++] = x; // 压入元素&#125; 因为只是操作了一次数组 $s$ 与 变量 $top$，所以时间复杂度为 $O(1)$ 。 接下来是删除元素，可以想到将栈顶移动到原栈顶的下一个元素上，以删除原本的元素。 但是要判断一下当前 $top$ 是否指向的是 $0$（空栈），否则就会收获 $\\color {Purple} {\\texttt {RE}} \\times \\infty$。 12345int pop()&#123; if(top)top --; else return -1; return 0;&#125; 同样的，时间复杂度为 $O(1)$。 而还有一个常用操作就是取栈当前的元素个数，因为 $top$ 指向了栈顶，所以 $top$ 就是栈当前的元素个数。 123int size()&#123; return top;&#125; $\\text {STL stack}$除了可以手写栈，强大的 $\\text {STL}$ 还为我们提供了 stack 关键字，用法如下： stack&lt;Type&gt; s 声明一个 Type 类型的栈 $s$。 s.top() 返回一个 int，表示当前栈顶的值。$O(1)$ s.push(x) 将元素 $x$ 压入栈 $s$。$O(1)$ s.pop() 弹出栈 $s$ 的栈顶元素。$O(1)$ s.empty() 返回一个 bool，true 表示栈 $s$ 为空，false 反之。$O(1)$ s.size() 返回一个 int，表示栈 $s$ 的元素个数。$O(1)$ 更多方法见微软文档 $\\texttt{stack STL}$ 部分。 队列队列（$\\text {queue}$）与栈相反，是一种先进先出（$\\text {First In First Out,FIOF}$）的线性表，也就是说，先入队的元素先出队，与生活中的「排队」是一样的。 而队列的限制则是只能在一端插入，在另一端删除，如下图： \\large 队头 \\gets 0\\ \\ \\begin{array}{c|c|c|c|c|c|c|c|c|{3}{r@{.}l}} \\hline \\ \\ \\ &1&2&3&4&5&6&7&8&\\ \\ \\\\ \\hline \\end{array}\\gets 9 \\ \\ 队尾一般的，我们将队列能进行插入的一端称作「队尾」，进行删除的一端称作「队头」。 而插入操作一般称作入队（$\\text {push}$），删除一般称作出队（$\\text {pop}$）。 $\\text {STL queue}$强大的 $\\text {STL}$ 自然也为我们提供了 queue 关键字。 除了可以手写栈，强大的 $\\text {STL}$ 还为我们提供了 stack 关键字，用法如下： queue&lt;Type&gt; q 声明一个 Type 类型的队列 $q$。 q.front() 返回一个 int，表示当前队头的值。$O(1)$ q.push(x) 将元素 $x$ 入队队列 $q$。$O(1)$ q.pop() 队列 $q$ 的队头元素出队。$O(1)$ q.empty() 返回一个 bool，true 表示队列 $q$ 为空，false 反之。$O(1)$ q.size() 返回一个 int，表示队列 $q$ 的元素个数。$O(1)$ 更多方法见微软文档 $\\texttt{queue STL}$ 部分。 优先队列优先队列与队列的区别可以用四个字来说明：「自动排序」， 那么，队列是 $\\text {FIFO}$，那优先队列就是「谁大谁出」 ，如图（下标为优先级）： \\large 队头 \\gets 10_1\\ \\ \\begin{array}{c|c|c|c|c|c|c|c|c|c|{3}{r@{.}l}} \\hline \\ \\ \\ &9_2&1_7&2_6&8_3&7_4&0_8&4_5\\ \\ \\\\ \\hline \\end{array} \\ \\ 队尾其实优先队列基于堆来实现，可以叫它大根堆，那堆是什么？ 堆是一类特殊的数据结构的总称，形态可以看作一颗树，一般的： 堆中一个结点的值总是小于或大于其子结点的值。 堆通常为一棵完全二叉树。 大根堆就是指父节点的值大于其子节点的值的堆，所以这就保证了根结点一定是最大的。 不能理解？看图： 如图中所述，层级越高的结点值越大。 $\\text {STL priorty_queue}$伟大的 $\\text {STL}$ 当然为我们贴心的准备好了，以前的选手真可怜不能用这个， 方法与 $\\text {queue}$ 基本一致，你可以把它当会自动排序的 $\\text {queue}$ 来用，不同点如下： priority_queue&lt;Type&gt; pq，声明一个优先队列 $pq$。 pq.top()，获取队首/堆顶的值，即 $pq$ 内的最大值。$O(1)$ 同时，pq.push() 与 pq.pop() 都是 $O(logn)$。 operator 重载运算符$\\text {priorty_queue}$ ，好！但是如果我希望使用小根堆或使用结构体类型呢？ 回想一下我们使用 sort() 的时候，是不是我们可以自定义一个 bool 函数 cmp 自定义比较规则呢？ $\\text {priorty_queue}$ 虽然不能写一个 cmp，但我们可以重载运算符 &lt; 来自定义比较规则。 重载运算符，就是修改一个运算符的意思，假设我对 + 运算符过敏，但是我又想做加法运算怎么办？ 可以重载 - 运算符，把 - 重载为 + 的意思，让程序以为「- 就是 +」，以此执行加法运算。 想要重载运算符，就需要定义一个名为 operator 的函数，基本格式如下： 123Type operator 运算符 (const Type &amp;变量名)&#123; return ...;&#125; 例如重载 - 运算符： 1234567891011121314#include&lt;bits/stdc++.h&gt;using namespace std;struct INT&#123; int vluae;&#125;;INT operator - (const INT &amp;a,const INT &amp;b)&#123; return INT&#123;a.vluae + b.vluae&#125;;&#125;int main()&#123; INT a = &#123;1&#125;,b = &#123;1&#125;,c;\tc = a - b; cout&lt;&lt;c.vluae; return 0;&#125; 成功输出了 2 ！！！ 接下来是 $\\text {FAQ}$ 环节： $\\color {red} {\\text {Q1}}$：重载了 - 之后，再想进行减法怎么办，会不会不能了？ $\\color {blue} {\\text {A1}}$：我们这里只是重载了 INT 的 -（类型为 INT），所以之后用别的类型进行减法就行了。 $\\color {red} {\\text {Q2}}$：为什么重载 - 时不直接使用 int 而是使用了结构体 INT，不麻烦吗？ $\\color {blue} {\\text {A2}}$：因为 $\\text {C++}$ 是禁止重载自带类型的，原因……你问 $\\text {C++}$ 去。 $\\color {red} {\\text {Q3}}$：所有的运算符都能重载吗？ $\\color {blue} {\\text {A3}}$：不是的，. .* -&gt;* :: sizeof ?: # 这些不能重载。 $\\color {red} {\\text {Q4}}$：原理是什么？ $\\color {blue} {\\text {A4}}$：其实就是调用函数来实现，只不过编译器检测到重载的运算符后自动执行罢了。 📚小尝试 重载运算符，使得 priority_queue 变为小根堆（小者先出）。 输入 $n$ 个正整数，然后利用 priority_queue 将它们从小到大输出。 提示：转换 &lt; 为相反的意思。 ✔答案 其实很简单，首先 operator 的返回值为 bool 因为 &lt; 的结果就是 bool， 然后 &lt; 的运算数是 $2$ 个，所以填 $2$ 个形参，既然我们希望从小往大，那就把它改反就好了。 #include&lt;bits/stdc++.h&gt; using namespace std; struct node&#123; int x; &#125;; priority_queue&lt;node&gt; pq; int n; bool operator&lt;(const node a,const node b)&#123; return a.x &gt; b.x; &#125; int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i ++)&#123; int x; cin&gt;&gt;x; pq.push(node&#123;x&#125;); &#125; while(n --)&#123; cout&lt;&lt;pq.top().x&lt;&lt;\" \"; pq.pop(); &#125; return 0; &#125; &nbsp; 集合集合（$\\text {set}$），指具有某种特定性质的具体的或抽象的对象汇总而成的集体，简称集。 其中，构成集合的这些对象则称为该集合的元素1。例如自然数集就是由自然数构成的集合，它的每一个元素都是自然数。 我们可以用 ${}$ 描述一个集合，在 ${}$ 里写集合内的元素，再用一个大写字母代表，像这样：$S = {1,2,3}$，用一个小写字母表示集合内的一个元素。 同时，集合还拥有以下三个性质： 确定性，一个元素 $a$ 是否属于一个集合 $A$，是确定的，不存在模棱两可的情况。 互异性，同一个集合内，任何两个元素均是不同的。 无序性，同一个集合内，元素是无序的，即 ${1,2,3}$ 与 ${3,2,1}$ 是同一个集合。 以上是数学中的集合，$\\text {STL}$ 中的 set 与它有些不一样。 $\\text {STL}$ setset 的元素在任何时刻都保持有序，并且不允许出现重复的元素，如有则只留下一个， 你可以理解成一个自动从大到小排序，自动去重的数组。 set 内部使用红黑树实现，操作方法与其他容器一致，增删查改的时间复杂度则非常平均，都是 $O(logn)$。 这就使得在一些增删查改都使用频繁的情况下，set 是一个不错的选择。 注意 set 不支持随机查找，只支持迭代器，所以需要使用内置的 find() 方法查找元素迭代器再访问。 set 同样可以重载运算符，需要重载的是 &lt; 运算符。 1. 来自百度百科「集合」词条。 &#8617;","tags":["OI·数据结构"],"categories":["OI笔记"]},{"title":"【OI·其他笔记】数论","path":"/2023/08/18/【其他笔记】数论/","content":"质数和约数 质数是指除了 $1$ 和它本身之外没有其他因数的自然数。 质数判定判定单个自然数是否为质数，可以使用试除法，在这里不多描述。 123456bool is_prime(int n)&#123; if(n &lt; 2) return 0; // 如果n小于2，不是质数，返回0 for(int i = 2; i &lt;= n / i; i++) // 从2开始逐个尝试除数i，直到i大于n的平方根 if(n % i == 0) return 0; // 如果i能整除n，说明n不是质数，返回0 return 1; // 如果没有找到能整除n的除数，说明n是质数，返回1&#125; 此算法复杂度为 $O(\\sqrt {n})$。 而接下来介绍判断 $[L,R]$ 质数的快速筛法。 Eratosthenes筛法 （埃氏筛法）我们知道一个合数一定可以分解为 $p \\times s (s eq 1)$ 的形式，其中 $p$ 是质数，$s$ 是倍数，如 $6 = 2 \\times 3,15 = 3 \\times 5$。 那么我们就可以枚举 $[L,R]$ 中的 $p$，对于每个 $p$，枚举 $s$，标记掉合数 $p \\times s$，剩下的必然是质数，这就是埃氏筛法。 但是我们会发现，如果使用这样的埃氏筛法，有一些数字会被标记多次，如 $6$，会被 $2$ 和 $3$ 标记两次。 所以我们可以做出一个小小的优化： 对于素数 $p$，只枚举倍数 $x \\geq p$ 的数，因为如果 $x &lt; p$，则 $x$ 中一定有比 $p$ 小的质因子，$p \\times s$ 会在前面筛选过程中被筛出。 还可以发现，在枚举的过程中，每次筛完后剩下的区间内第一个数一定是质数，原因同上。 所以枚举质数时不需要从 $1$ 枚举到 $n$，只要考虑到 $[2,\\sqrt {n}]$ 中的质数即可。 此算法时间复杂度为 $O(\\frac {n} {2} + \\frac {n} {3} + \\frac {n} {5} + …) = O(nloglogn)$ 12345678bool p[MAXN]; // 布尔数组，用于标记数字是否为合数p[0] = p[1] = 1; // 将0和1标记为合数，因为它们不是质数for(int i = 2; i &lt;= n; i++)&#123; if(p[i]) continue; // 如果当前数已经被标记为合数，则跳过，因为它不是质数 for(int j = i; i * j &lt;= n; j++)&#123; p[i * j] = 1; // 将当前数的倍数（p * s）标记为合数 &#125;&#125; 线性筛法尽管上面的埃氏筛法已经经过优化，减少了重复枚举的次数，可是合数还是会被重复枚举。 而这里的线性筛法，顾名思义，它的时间复杂度是 $O(n)$ 的。 怎么做到的？ 线性筛法每个合数只被它的最小质因数（$pri$）标记，所以每个数最多只会被标记一次。 依次考虑 $2 - n$之间的每一个数 $i$。 如果 $i$ 是质数，则将其保存到质数表中。 否则利用 $i$ 和质数表中的 $pri_j$ 筛去 $i \\times pri_j$。 注意，筛的过程中要确保 $pri_j$ 是 $i \\times pri_j$ 的最小质因子。 12345678910bool p[MAXN]; // 布尔数组，用于标记数字是否为合数int cnt = 0; // 计数器cntp[0] = p[1] = 1; // 特判，将0和1标记for(int i = 2; i &lt;= n; i++)&#123; if(!p[i]) pri[++cnt] = i; // 如果当前数字i是质数，则将其加入质数数组pri，并增加计数器cnt for(int j = 1;pri[j] &lt;= n / i; j ++)&#123; p[i * pri[j]] = 1; // 将当前数字i与质数数组中的质数相乘得到的倍数标记为合数 if(i % pri[j] == 0) break; // 如果i能被pri[j]整除，则跳出内层循环，避免重复标记 &#125;&#125; 练习1：Prime Distance $\\texttt {Prime Distance}$ $\\text {- 洛谷}$ 简要题面 给定两个整数 $L,R$， 求 $[L,R]$ 中相邻的两个差最大的质数和相邻的两个差最小的质数。 $1 \\le L &lt; R \\le 2 ^ {31} - 1,R - L \\le 10 ^ 6$ 解题思路由于数据范围很大，无法生成 $[1,𝑅]$ 中的所有质数。 使用筛法求出 $[2,\\sqrt{R}]$ 中的所有质数。 对于每个质数 $𝑝$ 把 𝐿, 𝑅 中能被 𝑝 整除的数标记， 即标记 $i \\times p (\\lceil \\frac {L} {p} \\rceil \\le i \\le \\lfloor \\frac {R} {p} \\rfloor)$为合数。 将筛出的质数进行相邻两两比较，找出答案即可。 分解质因数/子对于以下问题： 给定一个正整数 $n$，已知它是两个正整数 $p_1,p_2$（$p_1,p_2$ 均为质数）的乘积，试求出较大的 $p_1$。 $6 &lt; n \\le 10 ^ 9$ $n$ 的范围较小，考虑暴力枚举： 12345678910111213#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,i,j; cin&gt;&gt;n; for(i = 2;i &lt;= n / i;i ++)&#123; // 从 2 枚举到 sqrt(n) if(n % i == 0)&#123; // 如果 i 能整除 n，说明 i 是 n 的一个质因子 cout&lt;&lt;n / i&lt;&lt;endl; break; // 找到 ans 退出。 &#125; &#125; return 0;&#125; 此程序的原理，在这里不多赘述，前文已经写过了原因1。 此算法复杂度为 $O(\\sqrt n)$。 同样对于以下问题： 给定一个正整数 $n$，将它分解质因数并输出。 $1 \\le n \\le 10000$ $n$ 的范围非常小4，可以使用暴力： 1234567891011121314vector&lt;int&gt; breakdown(int N) &#123; vector&lt;int&gt; result; for (int i = 2; i * i &lt;= N; i++) &#123; if (N % i == 0) &#123; // 如果 i 能够整除 N，说明 i 为 N 的一个质因子。 while (N % i == 0) N /= i; result.push_back(i); &#125; &#125; if (N != 1) &#123; // 说明再经过操作之后 N 留下了一个素数 result.push_back(N); &#125; return result;&#125; 此算法复杂度为 $O(\\sqrt n)$。 算术基本定理若整数 $𝑁 \\geq 2$，那么 $𝑁$ 一定可以唯一地表示为若干质数的乘积。形如 N = p_1 ^ {c_1} p_2 ^ {c_2} ... p_k ^ {c _ k} (p_i\\text {为质数},c_i \\geq 0)练习2：细胞分裂$\\text {细胞分裂}$ $\\text {- 洛谷}$ 简要题面$\\texttt {Hanks}$ 博士正在为一个细胞实验做准备工作，他手里有 $N$ 种细胞，每种细胞经过 $1$ 秒钟可以分裂为 $S_i$个同种细胞。 他希望能选择一种细胞进行培养，使得细胞的个数能够均分为 $M$ 份样本 $(M = m1 ^ {m2})$，开始实验。 求选择哪种细胞可以使得实验的开始时间最早。 如果无论选择哪种细胞都不能满足要求，则输出 $-1$。 解题思路$m1 = p_1 ^ {k_1} \\times p_2 ^ {k_2} \\times p_3 ^ {k_3} \\times p_4 ^ {k_4} \\times …$ $m1 ^ {m2} = p_1 ^ {m2 \\times k_1} \\times p_2 ^ {m2 \\times k_2} \\times p_3 ^ {m2 \\times k_3} \\times p_4 ^ {m2 \\times k_4} \\times …$ $S_i = p_1 ^ {c_1} \\times p_2 ^ {c_2} \\times p_3 ^ {c_3} \\times p_4 ^ {c_4} \\times …$ 我们需要使 ${S_i} ^ t \\mod m1 ^ {m2} = 0$ 成立。 若质数 $p_i$ 对应的系数 $c_i = 0$ 但 $k_i eq 0$，则 $S_i$ 无法满足要求，否则需要时间为： ans_i = \\max \\Big (\\Big \\lceil \\frac {m2 \\times k_j} {c_j} \\Big \\rceil \\Big )若都无法满足则答案为 $-1$，否则答案为 $\\min(𝑎𝑛𝑠_i)$ 。 约数约数的基本性质若整数 $n$ 除以整数 $d$ 的余数为 $0$，即 $d$ 能整除 $n$。 则称 $d$ 是 $n$ 的约数，$n$ 是 $d$ 的倍数。记为 $d | n$。 若正整数 $n$ 被唯一分解为 $𝑛 = 𝑝1 ^ {𝑐_1} 𝑝_2 ^ {𝑐_2} ⋯ 𝑝𝑚 ^ {𝑐𝑚}$，其中 $𝑐𝑖$ 都是正整数，$𝑝_𝑖$ 都是质数。 且满足 $𝑝1 &lt; 𝑝𝑖 &lt;. . . &lt; 𝑝_𝑚$，则 $n$ 的正约数集合为 ： p_1^{c_1} p_2^{c_2}...p_k^{c_k} | 0 \\le b_i \\le c_i$n$ 的正约数个数为（约数个数定理）： (C_1 + 1) \\times (c_2 + 1) \\times ... (c_m + 1) = \\prod _{i = 1} ^ m (c_i + 1)$n$ 的所有正约数的和为（约数和定理）： (1 + p_1 + {p_1} ^ 2 + ... + {p_1} ^ {c_1}) \\times ... \\times (1 + p_m + {p_m} ^ 2 + ... + {p_m} ^ {c_m}) = \\prod _{i = 1} ^ m \\Big (\\sum _{j = 0} ^ {c_i} {p_i} ^ j \\Big )求正约数集合想求一个自然数的正约数集合，可以使用试除法。 一个自然数的 $n$ 的正约数最多有 $2 \\sqrt n$ 个。 12345678910int compute_SOPA(int n)&#123; int a[MAXN],tmp = 1; // 初始化 for(int i = 1;i &lt;= n / i;i ++)&#123; if(n % i == 0)&#123; // 判断因数 a[tmp ++] = i; // 加入集合 if(n / i != i)a[tmp ++] = n / i; // 根据除法的性质，用一个因数求出另一个因数，减少循环 &#125; &#125; return a;&#125; // 与判断质数相反QWQ 此算法的时间复杂度为 $O(\\sqrt n)$。 如果想求 $[1,n]$ 中每个数的的正约数集合，则须使用倍数法。 $[1,n]$ 每个数的的正约数个数之和约为 $nlogn$ 个。 1// 作者太懒没写 求正约数个数前文已经给出了公式2，此处不再赘述。 1234567891011121314unordered_map&lt;int,int&gt; zjs(int n)&#123; // 分解质因子，但是使用哈希表存储质因子 unordered_map&lt;int,int&gt; pri; for(int i = 2;i &lt;= n / i;i ++)&#123; while(n % i == 0) pri[i] ++,n /= i; &#125; if(n &gt; 1)pri[n] ++; return pri;&#125;unordered_map&lt;int,int&gt; pri = zjs(n);long long sum = 1; // 初始化 sum 为 1for(auto it:pri) // 遍历 pri sum = sum * (it.second + 1); // it.second 即获取 it 指向元素的 vluae 求正约数和同上，前文给出公式3，此处也不再赘述。 12345678910111213141516171819unordered_map&lt;int,int&gt; zjs(int n)&#123; // 分解质因子，但是使用哈希表存储质因子 unordered_map&lt;int,int&gt; pri; for(int i = 2;i &lt;= n / i;i ++)&#123; while(n % i == 0) pri[i] ++,n /= i; &#125; if(n &gt; 1)pri[n] ++; return pri;&#125;unordered_map&lt;int, int&gt; pri = zjs(n);long long sum = 1;for (auto it:pri) &#123; // 遍历 pri int p = it.first,a = it.second; // p 为 it 指向元素的键（key），a 为 it 指向元素的值（value） long long t = 1; while (a --) t = (t * p + 1); sum *= t;&#125; 练习3：反素数 $\\texttt {反素数}$ $\\text {- 洛谷}$ 简要题面 对于任何正整数 $x$，其约数个数记作 $g(x)$。例如：$g(1)=1,g(6)=4$。 如果某个正整数满足： 对于任意的 $0 &lt; i &lt; x$，都有 $g(x) &gt; g(i)$，那么称 $x$ 为反素数。 求不超过 $N$ 的最大的反素数。 $1 \\le N \\le 2 \\times 10^9$。 解题思路 $[1,N]$ 中最大的反素数，就是 $[1,N]$ 中约数个数最多的数中最小的一个。 $[1,N]$ 中任何数的不同质因子都不会超过 $10$ 个，且所有质因子的指数总和不超过 $30$。 $\\forall x \\in [1, 𝑁]$，$x$ 为反素数的必要条件是：$x$ 分解质因数后可写作 $2 ^ {c1} \\times 3 ^ {c_2} \\times 5 ^ {c_3} \\times 7 ^ {c_4} \\times 11 ^ {c_5} \\times 13 ^ {c_6} \\times 17 ^ {c_7} \\times 19 ^ {c_8} \\times 23 ^ {c_9} \\times 29 ^ {c{10}}$ 并且 $c1 \\geq c_2 \\geq … \\geq c{10} \\geq 0$ 综上，DFS 即可。 最大公约数和最小公倍数 $a eq 0,b eq 0$ 能使 $d|a$ 和 $d|b$ 的最大整数称为 $a$ 和 $b$ 的最大公约数，用 $\\gcd(a,b)$ 表示。 或者记为 $(a,b)$。 能使 $a|d$ 和 $b|d$ 的最小整数称为 $a$ 和 $b$ 的最小公倍数，用 $\\text {lcm}(a,b)$ 表示。 或者记为 $[a,b]$。 最大公约数与最小公倍数的性质 若 $a|m$ 且 $b|m$，则 $\\text {lcm}(a,b) | m$ 若 $a,b,m$ 皆为正整数，则 $\\text {lcm}(ma,mb) = m \\times \\text {lcm}(a,b)$ $\\text {lcm}(a_1,a_2) = a_1a_2 \\div \\gcd(a_1,a_2)$ $\\text {lcm}(a_1,a_2,a_3) = \\text {lcm}(\\text {lcm}(a_1,a_2),a_3)$ 求解最大公约数 这里有两种算法。 更相减损术 不详细介绍，只给出公式： ∀𝑎, 𝑏 ∈ ℕ, 𝑏 ≠ 0，有 \\gcd(𝑎, 𝑏) = \\gcd(𝑏, 𝑎 − 𝑏) = \\gcd(𝑎, 𝑎 − 𝑏) ∀𝑎, 𝑏 ∈ ℕ，有 \\gcd(2𝑎, 2𝑏) = 2\\gcd(𝑎, 𝑏) 欧几里得算法（碾转相除法） 先放公式： ∀𝑎, 𝑏 ∈ ℕ, 𝑏 ≠ 0,\\gcd(𝑎, 𝑏) = \\gcd(𝑏,a \\mod b)算法很简单，通俗来讲，就是用 $a \\div b$，得到余数 $c$ ，再用 $b \\div c$，得到余数 $d$，再用 $c \\div d$…… 直到余数为于 $0$，此时，除数即为最大公约数。 例如求 $\\gcd(1997,615)$： $1997 ÷ 615 = 3 …152$ $615 ÷ 152 = 4…7$ $152 ÷ 7 = 21…5$ $7 ÷ 5 = 1…2$ $5 ÷ 2 = 2…1$ $2 ÷ 1 = 2…0$ $\\gcd(1997,615) = 1$ 按照上面的算法，我们简单的可以写出一个递归函数。 1234int gcd(int a, int b)&#123; if(b == 0)return a; return gcd(b,a % b);&#125; 但是递归是很慢的，我们可以优化出一个循环版本的。 12345678int gcd2(int a,int b)&#123; while(b &gt; 0)&#123; int t = a; a = b; b = t % b; &#125; return a;&#125; 此算法的时间复杂度为 $O(log n)$ 求解最小公倍数求 $\\text {lcm}(a,b)$，有一个公式： \\text {lcm}(a,b) = \\frac {ab} {\\gcd(a,b)}可以写出代码： 1a / gcd(a,b) * b; 这里有个细节，为了防止 a * b 爆 long long，先除后乘，结果不变。 互质与欧拉函数首先，什么是互质？ $\\forall a,b \\in ℕ$，若 $\\gcd(a,b) = 1$，则称 $a,b$ 互质。 $[1,N]$ 中与 $N$ 互质的数的个数被称作欧拉函数，记作 $𝜑(𝑁)$。、 若 $N = p_1 ^ {c_1} p_2 ^ {c_2}…p_m^{c_m}$，则： 𝜑(𝑁) = N \\times \\frac {p_1 - 1} {p_1} \\times \\frac {p_2 - 1} {p_2} \\times ... \\times \\frac {p_m - 1} {p_m} = N \\prod _{p|N} \\Big (1 - \\frac {1} {p} \\Big)欧拉函数的特性 $\\forall n &gt; 1$，$[1,n]$ 中与 $n$ 互质数的和为 $n \\times 𝜑(n) \\div 2$。 若 $a,b$ 互质，则 $𝜑(a,b) = 𝜑(a) 𝜑(b)$。 积性函数：如果 $a,b$ 互质时，有 $f(ab)=f(a) \\times f(b)$，那么称函数 $f$ 为积性函数。 若 $f$ 是积极性函数，且在算术基本定理中 $n = \\prod {i = 1}^m p_i ^ {c_i}$ 则 $f(n) = \\prod {i = 1} ^ m f(p_i ^ {c_i})$。 设 $p$ 为质数，若 $p|n$ 且 $p^2|n$ 则 $𝜑(n) = 𝜑(\\frac {n} {p}) \\times p$。 设 $p$ 为质数，若 $p|n$ 且 $p^2∤n$ 则 $𝜑(n) = 𝜑(\\frac {n} {p}) \\times (p - 1)$。 $\\sum_{d|n} 𝜑(d) = n$。 练习4：仪仗队简要题意$\\texttt {C}$ 君站在一个由学生组成的 $n \\times m$ 的方阵的左后方，如 123456· · · · ·· · · · ·· · · · ·* · · · ·C君站在 * 处· 是学生所站位置 $\\texttt {C}$ 君希望知道他能看到的学生数。 $1 \\le N \\le 40000$ 解题思路除了 $(1,0) (0,1) (1,1)$ 外，$(x,y)$ 处的学生能被看到，需满足： 1 \\le x,y \\le N,x ≠ y 并且 \\gcd(x,y) = 1因此，答案为 $3 + 2 \\times \\sum _{i = 2} ^ {N - 1} 𝜑(i)$。 线性筛求欧拉函数123456789101112131415for(int i=2; i&lt;=n; ++i) &#123; // 从2到n遍历 if(!p[i]) &#123; pri[++cnt] = i; // pri数组存储质数 phi[i] = i-1; // 欧拉函数的初始值 &#125; for(int j=1; j&lt;=cnt &amp;&amp; i*pri[j]&lt;=n; ++j) &#123; // 遍历质数数组pri，直到i*pri[j]超过n p[i*pri[j]] = true; // i*pri[j]不是质数（标记为true） if(i % pri[j] == 0) &#123; phi[i*pri[j]] = phi[i] * pri[j]; // 若i是pri[j]的倍数，欧拉函数的计算 break; // 跳出循环 &#125; else &#123; phi[i*pri[j]] = phi[i] * (pri[j] - 1); // 欧拉函数的计算 &#125; &#125; &#125; 同余逆元对于一个线性同余方程 $ax \\equiv 1 (\\mod b)$，则 $x$ 称为 $a \\mod b$ 的逆元，记作 $a ^ {-1}$。 扩展欧几里得求单个逆元将线性同余方程 $ax \\equiv 1 (\\mod b)$ 转化为求解方程 $ax + by = 1$， 然后利用扩展欧几里得求得解。 1234567891011void Exgcd(ll a,ll b,ll &amp;x,ll &amp;y) &#123; if (!b) x = 1, y = 0; else Exgcd(b, a % b, y, x), y -= a / b * x;&#125;int main() &#123; ll x, y; Exgcd(a, p, x, y); x = (x % p + p) % p; printf(&quot;%d &quot;,x); //x是a在mod p下的逆元&#125; 线性求解多个连续逆元首先，我们可以确定 $1 ^ {-1} \\equiv 1(\\mod p)$， 然后设 $p = k \\times i + r(1 &lt; r &lt; i &lt; p)$，$k$ 是 $p \\div i$ 的商，$r$ 是余数。 再将这个式子放到 $(\\mod p)$ 意义下就会得到： k \\times + r \\equiv 0 (\\mod p)然后乘上 $i^{-1},r^{-1}$ 就可以得到： k \\times r^{-1} + i^{-1} \\equiv 0(\\mod p) i ^ {-1} \\equiv -k \\times r ^ {-1} (\\mod p) i ^ {-1} \\equiv - \\lfloor \\frac {p} {i} \\rfloor \\times (p \\mod i) ^ {-1} (\\mod p) 这样，我们就可以用递推的方式求出 $[1,n]$ 区间的所有逆元了。 123inv[1] = 1;for(int i = 2; i &lt;= n;i ++)inv[i] = (p - p / i) * inv[p % i] % p; 高斯消元简单容斥原理概率与数学期望 PS：因为后面的太难，作者还不会😓，到时候慢慢更新吧！ 1. 见埃氏筛法部分 &#8617; 2. 见约数的基本性质部分「约数个数定理」 &#8617; 3. 见约数的基本性质部分「约数和定理」 &#8617; 4. 因为复杂度是 $O(\\sqrt n)$，所以 $n$ 最大为 $(10^8)^2 = 10^{16}$ &#8617;","tags":["OI·其他"],"categories":["OI笔记"]}]