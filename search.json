[{"title":"【OI·数据结构】线性表","path":"/2023/08/24/【数据结构】线性表-1/","content":"$\\text {STL vector}$ 在语法入门中，我们曾学习过数组，实际上，数组就是一种数据结构，而且是所有其他数据结构的基础， 我们后面要学到的栈、二叉树、图等都是基于数组或链表存储的，不过这是后话了。 回想起数组，它有一个不太方便的特点是「长度固定」，如果想扩容，则需要使用 resize() 方法， 但是接下来我们介绍的 $\\text {vector}$ 则可以动态的规划空间， 它每次加入元素，都会将现有空间翻倍，也就是翻倍法。 直到空间充足，这样，如果需要大小为 $n$ 的空间，$\\text {vector}$ 只需要扩容 $log2(n)$ 次就可以了。 $\\text {vector}$ 方法我们已经知道了 $\\text {vecror}$ 的「翻倍魔法」，接下来介绍 $\\text {vector}$ 的各种方法： 声明标准的是vector&lt;Type&gt; v，声明一个 Type 类型的 $\\text {vector v}$ 。 vector&lt;Type&gt; v(N,i)，在声明的同时，预设长度为 $N$，所有元素初始化为 $i$，省略 $i$ 则默认为 $0$。 vector&lt;int&gt; v &#123;114514,1919810&#125;，在声明的同时，初始设置了一些元素 $114514,1919810$。 vector&lt;int&gt; v(a) // a 为一个 vector，在声明的同时，赋值为 $a$。 vector&lt;int&gt; v(a,a + sizeof(a)) // a 为一个 int 数组，在声明的同时，赋值为 $a$。 vector&lt;Type&gt; v[114514]，与标准的不同的是，它了声明 114514 个 vector。 …… 💡Tips 你知道吗？ vector 的类型也可以是一个 vector、set 或 pair 等其他容器哦！ 像这样：vector&lt;vector&lt;int>> v 声明一个二维 vector。 甚至可以无限套娃：vector&lt;vector&lt;vector&lt;...>>>。 ###### 成员函数 `v[pos]`，查询 $pos$ 位置元素的值。$O(1)$ `v.push_back(x)`，将变量 $x$ 插入到末尾。均摊 $O(1)$ `v.push_pop()`，将末尾的元素删除。$O(1)$ `v.insert(pos,x)`，在 $pos$ 位置的前面插入一个元素 $x$。$O(n)$ `v.erase(pos,len)`，删除从 $pos$ 位置开始的 $len$ 个元素。$O(n)$ `v.size()`，返回 $v$ 的长度。$O(1)$ 更多方法参阅微软文档。 ###### 迭代器 $\\text {vector}$ 除了可以使用类似于 $\\text {array}$ 的使用方法，也可以使用它的专属方式——迭代器。 迭代器类似于指针，你可以将迭代器指向一个元素以操作元素。 `vector::iterator it`，声明迭代器 $it$。 `v.begin()` `v.end()`，分别获取首尾的迭代器，注意，这里的尾指的是最后一个元素向后一个位置。 `*it`，获取 $it$ 指向元素的值。 `++ it` `-- it`，指向下一个和上一个元素。 `for(it = v.begin();i != v.end();i ++)`，迭代器 $it$ 遍历 $v$，修改/查询需使用 `*it`。 `for(auto it:v)`，$\\text {C++11}$ 提供的遍历容器的方式，可以获取元素的值。 `for(auto &it:v)`，同上，但是是以引用的方式遍历，可以修改元素的值。 ⚠️Warning for(auto it:v) 并不是绝对安全的遍历方法，而且 it 并非迭代器。 示例： 12345678910111213141516171819#include&lt;bits/stdc++.h&gt;using namespace std;vector&lt;int&gt; v &#123;1,2,3,4,5&#125;;vector&lt;int&gt;::iterator it;int main()&#123; v.push_back(114514); for(int i = 0;i &lt; v.size();i ++) // output:1,2,3,4,5,114514 cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;; puts(&quot;&quot;); v.pop_back(); for(it = v.begin();i != v.end();i ++) // output:1,2,3,4,5 cout&lt;&lt;*it&lt;&lt;&quot; &quot;; puts(&quot;&quot;); for(auto &amp;it:v) it = 0; for(auto it:v) cout&lt;&lt;it&lt;&lt;&quot; &quot;; // output:0 0 0 0 0 return 0;&#125; 栈栈（$\\text {stack}$）是一种后进先出（$\\text {Last In First Out,LIFO}$）的线性表，顾名思义，后入栈的元素反而先出栈，其限制是只能在一端插入与删除， 就像下面这样，只有一端有开口，另一端则是封死的。 \\large\\text {栈顶} \\begin{array}{c|c|c|c|c|c|c|c|{3}{r@{.}l|}} \\hline \\ 0&1&2&3&4&5&6&7&...\\\\ \\hline \\end{array} 栈底一般的，我们将栈能插入与删除的一端称为「栈顶」，而不能进行操作的一端称为「栈底」。 同时，插入操作一般称作入栈或压栈（$\\text {push}$），删除操作称作出栈或弹出（$\\text {pop}$）。 一个通俗的例子是把栈看作一个盘子堆，只能在盘子堆的顶上拿取盘子，如果从中间抽出/插入盘子，盘子堆就会倒塌，碎成碎片。 手写栈接下来我们尝试一下，使用静态数组来模拟一个栈。 从增加元素开始，先考虑栈底与栈顶的位置，很明显，为了不限制栈的大小与方便，栈底设在 $1$ 的位置比较好， 再用一个 int $top$ 指向当前栈顶的位置 1int top = 0,s[MAXN] = &#123;0&#125;; // 一开始栈内没有元素，所以 top 指向 0 表示当前栈内为空 当进行压栈时，新的元素会被「放」在原来的栈顶上， 此时的栈顶就是 $top + 1$，再赋值即可。 123void push(int x)&#123; // 传参需要压栈的元素 x s[top ++] = x; // 压入元素&#125; 因为只是操作了一次数组 $s$ 与 变量 $top$，所以时间复杂度为 $O(1)$ 。 接下来是删除元素，可以想到将栈顶移动到原栈顶的下一个元素上，以删除原本的元素。 但是要判断一下当前 $top$ 是否指向的是 $0$（空栈），否则就会收获 $\\color {Purple} {\\texttt {RE}} \\times \\infty$。 12345int pop()&#123; if(top)top --; else return -1; return 0;&#125; 同样的，时间复杂度为 $O(1)$。 而还有一个常用操作就是取栈当前的元素个数，因为 $top$ 指向了栈顶，所以 $top$ 就是栈当前的元素个数。 123int size()&#123; return top;&#125; $\\text {STL stack}$除了可以手写栈，强大的 $\\text {STL}$ 还为我们提供了 stack 关键字，用法如下： stack&lt;Type&gt; s 声明一个 Type 类型的栈 $s$。 s.top() 返回一个 int，表示当前栈顶的值。$O(1)$ s.push(x) 将元素 $x$ 压入栈 $s$。$O(1)$ s.pop() 弹出栈 $s$ 的栈顶元素。$O(1)$ s.empty() 返回一个 bool，true 表示栈 $s$ 为空，false 反之。$O(1)$ s.size() 返回一个 int，表示栈 $s$ 的元素个数。$O(1)$ 更多方法见微软文档 $\\texttt{stack STL}$ 部分。 队列队列（$\\text {queue}$）与栈相反，是一种先进先出（$\\text {First In First Out,FIOF}$）的线性表，也就是说，先入队的元素先出队，与生活中的「排队」是一样的。 而队列的限制则是只能在一端插入，在另一端删除，如下图： \\large 队头 \\gets 0\\ \\ \\begin{array}{c|c|c|c|c|c|c|c|c|{3}{r@{.}l}} \\hline \\ \\ \\ &1&2&3&4&5&6&7&8&\\ \\ \\\\ \\hline \\end{array}\\gets 9 \\ \\ 队尾一般的，我们将队列能进行插入的一端称作「队尾」，进行删除的一端称作「队头」。 而插入操作一般称作入队（$\\text {push}$），删除一般称作出队（$\\text {pop}$）。 $\\text {STL queue}$强大的 $\\text {STL}$ 自然也为我们提供了 queue 关键字。 除了可以手写栈，强大的 $\\text {STL}$ 还为我们提供了 stack 关键字，用法如下： queue&lt;Type&gt; q 声明一个 Type 类型的队列 $q$。 q.front() 返回一个 int，表示当前队头的值。$O(1)$ q.push(x) 将元素 $x$ 入队队列 $q$。$O(1)$ q.pop() 队列 $q$ 的队头元素出队。$O(1)$ q.empty() 返回一个 bool，true 表示队列 $q$ 为空，false 反之。$O(1)$ q.size() 返回一个 int，表示队列 $q$ 的元素个数。$O(1)$ 更多方法见微软文档 $\\texttt{queue STL}$ 部分。 优先队列优先队列与队列的区别可以用四个字来说明：「自动排序」， 那么，队列是 $\\text {FIFO}$，那优先队列就是「谁大谁出」 ，如图（下标为优先级）： \\large 队头 \\gets 10_1\\ \\ \\begin{array}{c|c|c|c|c|c|c|c|c|c|{3}{r@{.}l}} \\hline \\ \\ \\ &9_2&1_7&2_6&8_3&7_4&0_8&4_5\\ \\ \\\\ \\hline \\end{array} \\ \\ 队尾其实优先队列基于堆来实现，可以叫它大根堆，那堆是什么？ 堆是一类特殊的数据结构的总称，形态可以看作一颗树，一般的： 堆中一个结点的值总是小于或大于其子结点的值。 堆通常为一棵完全二叉树。 大根堆就是指父节点的值大于其子节点的值的堆，所以这就保证了根结点一定是最大的。 不能理解？看图： 如图中所述，层级越高的结点值越大。 $\\text {STL priorty_queue}$伟大的 $\\text {STL}$ 当然为我们贴心的准备好了，以前的选手真可怜不能用这个， 方法与 $\\text {queue}$ 基本一致，你可以把它当会自动排序的 $\\text {queue}$ 来用，不同点如下： priority_queue&lt;Type&gt; pq，声明一个优先队列 $pq$。 pq.top()，获取队首/堆顶的值，即 $pq$ 内的最大值。$O(1)$ 同时，pq.push() 与 pq.pop() 都是 $O(logn)$。 operator 重载运算符$\\text {priorty_queue}$ ，好！但是如果我希望使用小根堆或使用结构体类型呢？ 回想一下我们使用 sort() 的时候，是不是我们可以自定义一个 bool 函数 cmp 自定义比较规则呢？ $\\text {priorty_queue}$ 虽然不能写一个 cmp，但我们可以重载运算符 &lt; 来自定义比较规则。 重载运算符，就是修改一个运算符的意思，假设我对 + 运算符过敏，但是我又想做加法运算怎么办？ 可以重载 - 运算符，把 - 重载为 + 的意思，让程序以为「- 就是 +」，以此执行加法运算。 想要重载运算符，就需要定义一个名为 operator 的函数，基本格式如下： 123Type operator 运算符 (const Type &amp;变量名)&#123; return ...;&#125; 例如重载 - 运算符： 1234567891011121314#include&lt;bits/stdc++.h&gt;using namespace std;struct INT&#123; int vluae;&#125;;INT operator - (const INT &amp;a,const INT &amp;b)&#123; return INT&#123;a.vluae + b.vluae&#125;;&#125;int main()&#123; INT a = &#123;1&#125;,b = &#123;1&#125;,c;\tc = a - b; cout&lt;&lt;c.vluae; return 0;&#125; 成功输出了 2 ！！！ 接下来是 $\\text {FAQ}$ 环节： $\\color {red} {\\text {Q1}}$：重载了 - 之后，再想进行减法怎么办，会不会不能了？ $\\color {blue} {\\text {A1}}$：我们这里只是重载了 INT 的 -（类型为 INT），所以之后用别的类型进行减法就行了。 $\\color {red} {\\text {Q2}}$：为什么重载 - 时不直接使用 int 而是使用了结构体 INT，不麻烦吗？ $\\color {blue} {\\text {A2}}$：因为 $\\text {C++}$ 是禁止重载自带类型的，原因……你问 $\\text {C++}$ 去。 $\\color {red} {\\text {Q3}}$：所有的运算符都能重载吗？ $\\color {blue} {\\text {A3}}$：不是的，. .* -&gt;* :: sizeof ?: # 这些不能重载。 $\\color {red} {\\text {Q4}}$：原理是什么？ $\\color {blue} {\\text {A4}}$：其实就是调用函数来实现，只不过编译器检测到重载的运算符后自动执行罢了。 📚小尝试 重载运算符，使得 priority_queue 变为小根堆（小者先出）。 输入 $n$ 个正整数，然后利用 priority_queue 将它们从小到大输出。 提示：转换 &lt; 为相反的意思。 ✔答案 其实很简单，首先 operator 的返回值为 bool 因为 &lt; 的结果就是 bool， 然后 &lt; 的运算数是 $2$ 个，所以填 $2$ 个形参，既然我们希望从小往大，那就把它改反就好了。 #include&lt;bits/stdc++.h&gt; using namespace std; struct node&#123; int x; &#125;; priority_queue&lt;node&gt; pq; int n; bool operator&lt;(const node a,const node b)&#123; return a.x &gt; b.x; &#125; int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i ++)&#123; int x; cin&gt;&gt;x; pq.push(node&#123;x&#125;); &#125; while(n --)&#123; cout&lt;&lt;pq.top().x&lt;&lt;\" \"; pq.pop(); &#125; return 0; &#125; &nbsp; 集合集合（$\\text {set}$），指具有某种特定性质的具体的或抽象的对象汇总而成的集体，简称集。 其中，构成集合的这些对象则称为该集合的元素1。例如自然数集就是由自然数构成的集合，它的每一个元素都是自然数。 我们可以用 ${}$ 描述一个集合，在 ${}$ 里写集合内的元素，再用一个大写字母代表，像这样：$S = {1,2,3}$，用一个小写字母表示集合内的一个元素。 同时，集合还拥有以下三个性质： 确定性，一个元素 $a$ 是否属于一个集合 $A$，是确定的，不存在模棱两可的情况。 互异性，同一个集合内，任何两个元素均是不同的。 无序性，同一个集合内，元素是无序的，即 ${1,2,3}$ 与 ${3,2,1}$ 是同一个集合。 以上是数学中的集合，$\\text {STL}$ 中的 set 与它有些不一样。 $\\text {STL}$ setset 的元素在任何时刻都保持有序，并且不允许出现重复的元素，如有则只留下一个， 你可以理解成一个自动从大到小排序，自动去重的数组。 set 内部使用红黑树实现，操作方法与其他容器一致，增删查改的时间复杂度则非常平均，都是 $O(logn)$。 这就使得在一些增删查改都使用频繁的情况下，set 是一个不错的选择。 注意 set 不支持随机查找，只支持迭代器，所以需要使用内置的 find() 方法查找元素迭代器再访问。 set 同样可以重载运算符，需要重载的是 &lt; 运算符。 1. 来自百度百科「集合」词条。 &#8617;","tags":["OI·数据结构"],"categories":["OI笔记"]}]